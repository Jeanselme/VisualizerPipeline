{
    "id": "5ca5748d-3ec8-4b5f-a2de-f713043fccc5",
    "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/pipeline.json",
    "created": "2020-01-24T15:10:29.810166Z",
    "inputs": [
        {
            "name": "dataset inputs"
        }
    ],
    "outputs": [
        {
            "data": "steps.10.produce",
            "name": "subpipeline"
        }
    ],
    "steps": [
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "fe0f1ac8-1d39-463a-b344-7bd498a31b91",
                "version": "0.1",
                "python_path": "d3m.primitives.data_augmentation.datamart_augmentation.Common",
                "name": "Perform dataset augmentation using Datamart",
                "digest": "70c10af7db1be585e1281ee4b80a9b7f1a391ec00f48f32a9a8484eb8b0de8ed"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "inputs.0"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "system_identifier": {
                    "type": "VALUE",
                    "data": "NYU"
                },
                "search_result": {
                    "type": "VALUE",
                    "data": "{\"augmentation\": {\"left_columns\": [[1]], \"left_columns_names\": [[\"tpep_pickup_datetime\"]], \"right_columns\": [[0]], \"right_columns_names\": [[\"DATE\"]], \"type\": \"join\"}, \"d3m_dataset_description\": {\"about\": {\"approximateSize\": \"1523693 B\", \"datasetID\": \"datamart.url.ce55ccdfd9a653a082795b7bf7bd88e6\", \"datasetName\": \"ny_lga_weather_16_17_18\", \"datasetSchemaVersion\": \"4.0.0\", \"datasetVersion\": \"1.0\", \"description\": \"new york, weather, hourly, LaGuardia, LGA\", \"license\": \"unknown\", \"redacted\": false}, \"dataResources\": [{\"columns\": [{\"colIndex\": 0, \"colName\": \"DATE\", \"colType\": \"dateTime\", \"role\": [\"attribute\"]}, {\"colIndex\": 1, \"colName\": \"HOURLYSKYCONDITIONS\", \"colType\": \"string\", \"role\": [\"attribute\"]}, {\"colIndex\": 2, \"colName\": \"HOURLYDRYBULBTEMPC\", \"colType\": \"real\", \"role\": [\"attribute\"]}, {\"colIndex\": 3, \"colName\": \"HOURLYRelativeHumidity\", \"colType\": \"real\", \"role\": [\"attribute\"]}, {\"colIndex\": 4, \"colName\": \"HOURLYWindSpeed\", \"colType\": \"real\", \"role\": [\"attribute\"]}, {\"colIndex\": 5, \"colName\": \"HOURLYWindDirection\", \"colType\": \"string\", \"role\": [\"attribute\"]}, {\"colIndex\": 6, \"colName\": \"HOURLYStationPressure\", \"colType\": \"real\", \"role\": [\"attribute\"]}], \"isCollection\": false, \"resFormat\": {\"text/csv\": [\"csv\"]}, \"resID\": \"learningData\", \"resPath\": \"tables/learningData.csv\", \"resType\": \"table\"}]}, \"id\": \"datamart.url.ce55ccdfd9a653a082795b7bf7bd88e6\", \"metadata\": {\"columns\": [{\"coverage\": [{\"range\": {\"gte\": 1482850800.0, \"lte\": 1509444000.0}}, {\"range\": {\"gte\": 1453096800.0, \"lte\": 1479884400.0}}, {\"range\": {\"gte\": 1512388800.0, \"lte\": 1538787600.0}}], \"mean\": 1495931400.0, \"name\": \"DATE\", \"semantic_types\": [\"http://schema.org/DateTime\"], \"stddev\": 25590011.431395352, \"structural_type\": \"http://schema.org/Text\"}, {\"missing_values_ratio\": 0.0018680961663417803, \"name\": \"HOURLYSKYCONDITIONS\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 9.0, \"lte\": 19.0}}, {\"range\": {\"gte\": -6.1, \"lte\": 8.0}}, {\"range\": {\"gte\": 20.6, \"lte\": 31.7}}], \"mean\": 14.666224009096823, \"missing_values_ratio\": 0.00020305393112410655, \"name\": \"HOURLYDRYBULBTEMPC\", \"semantic_types\": [], \"stddev\": 9.973788193915643, \"structural_type\": \"http://schema.org/Float\"}, {\"coverage\": [{\"range\": {\"gte\": 50.0, \"lte\": 70.0}}, {\"range\": {\"gte\": 26.0, \"lte\": 49.0}}, {\"range\": {\"gte\": 73.0, \"lte\": 96.0}}], \"mean\": 60.70849577647823, \"missing_values_ratio\": 0.00024366471734892786, \"name\": \"HOURLYRelativeHumidity\", \"semantic_types\": [], \"stddev\": 18.42048051096981, \"structural_type\": \"http://schema.org/Float\"}, {\"coverage\": [{\"range\": {\"gte\": 0.0, \"lte\": 8.0}}, {\"range\": {\"gte\": 16.0, \"lte\": 28.0}}, {\"range\": {\"gte\": 9.0, \"lte\": 15.0}}], \"mean\": 10.68859649122807, \"missing_values_ratio\": 0.00012183235867446393, \"name\": \"HOURLYWindSpeed\", \"semantic_types\": [], \"stddev\": 5.539675475162907, \"structural_type\": \"http://schema.org/Float\"}, {\"missing_values_ratio\": 0.00012183235867446393, \"name\": \"HOURLYWindDirection\", \"semantic_types\": [], \"structural_type\": \"http://schema.org/Text\"}, {\"coverage\": [{\"range\": {\"gte\": 29.86, \"lte\": 30.12}}, {\"range\": {\"gte\": 30.14, \"lte\": 30.55}}, {\"range\": {\"gte\": 29.42, \"lte\": 29.84}}], \"mean\": 29.90760315139694, \"missing_values_ratio\": 0.0025584795321637425, \"name\": \"HOURLYStationPressure\", \"semantic_types\": [], \"stddev\": 0.24584097919742368, \"structural_type\": \"http://schema.org/Float\"}], \"date\": \"2019-11-08T03:01:18.765404Z\", \"description\": \"new york, weather, hourly, LaGuardia, LGA\", \"materialize\": {\"date\": \"2019-08-29T20:11:03.787286Z\", \"direct_url\": \"https://gitlab.com/svattam/datamart-uploads/raw/master/ny_lga_weather_16_17_18.csv\", \"identifier\": \"datamart.url\"}, \"name\": \"ny_lga_weather_16_17_18\", \"nb_rows\": 24624, \"sample\": \"DATE,HOURLYSKYCONDITIONS,HOURLYDRYBULBTEMPC,HOURLYRelativeHumidity,HOURLYWindSpeed,HOURLYWindDirection,HOURLYStationPressure\\n2016-02-23 21:00:00,OVC:08 10,2.2,89.0,24,080,30.21\\n2016-02-25 00:00:00,SCT:04 10 BKN:07 17 OVC:08 24,16.0,88.0,38,180,29.28\\n2016-09-01 08:00:00,SCT:04 32 SCT:04 75 OVC:08 110,23.3,82.0,0.0,000,29.81\\n2016-10-03 02:00:00,SCT:04 12 OVC:08 23,18.3,81.0,5.0,250,29.97\\n2016-10-11 08:00:00,CLR:00,11.1,55.0,8.0,030,30.44\\n2016-10-14 00:00:00,CLR:00,13.3,57.0,10.0,330,30.16\\n2017-01-03 01:00:00,OVC:08 5,4.4,93.0,21.0,050,30.19\\n2017-01-08 10:00:00,FEW:02 35,-6.7,50.0,18.0,290,30.27\\n2017-01-27 11:00:00,FEW:02 35 FEW:02 48 BKN:07 60,6.7,43.0,17.0,270,29.63\\n2017-04-16 22:00:00,OVC:08 85,22.2,55.0,15.0,290,29.82\\n2017-06-06 20:00:00,BKN:07 12 OVC:08 18,13.0,82.0,15.0,060,29.86\\n2017-07-06 10:00:00,FEW:02 70 SCT:04 120 BKN:07 200,23.9,62.0,9.0,130,30.12\\n2017-07-08 03:00:00,FEW:02 120 FEW:02 250,22.2,97.0,6.0,200,29.70\\n2017-10-18 16:00:00,CLR:00,22.2,38.0,9.0,190,30.21\\n2017-12-30 15:00:00,BKN:07 28 BKN:07 36 OVC:08 48,-5.0,80.0,8.0,200,29.88\\n2018-01-27 09:00:00,SCT:04 250,4.4,65.0,10.0,210,30.46\\n2018-02-26 18:00:00,SCT:04 140 BKN:07 250,10.6,39.0,8.0,310,30.12\\n2018-02-28 13:00:00,FEW:02 70 FEW:02 250,13.3,36.0,13.0,230,29.96\\n2018-06-21 14:00:00,FEW:02 43 FEW:02 100 SCT:04 170,27.8,44.0,0.0,000,29.72\\n2018-09-01 02:00:00,SCT:04 25 SCT:04 90 BKN:07 150,22.2,66.0,11.0,100,30.25\\n\", \"size\": 1523693, \"version\": \"v0.5.1-106-g9bdc060\"}, \"score\": 20.0, \"supplied_id\": null, \"supplied_resource_id\": null}"
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "fe0f1ac8-1d39-463a-b344-7bd498a31b92",
                "version": "0.1.0",
                "python_path": "d3m.primitives.data_cleaning.clean_augmentation.AutonBox",
                "name": "Clean dataset of unaugmented rows",
                "digest": "84c862988397f5bc608668e5b6fa67b01878832e7e6121723a52dc4c8223f44e"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.0.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "original_columns": {
                    "type": "VALUE",
                    "data": [
                        "d3mIndex",
                        "tpep_pickup_datetime",
                        "num_pickups"
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                "version": "0.2.0",
                "python_path": "d3m.primitives.data_transformation.denormalize.Common",
                "name": "Denormalize datasets",
                "digest": "c2ac53d5362c47b9227d72b31c4845cf06331c044c443f64b06173a82fa2af58"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.1.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                "name": "Extract a DataFrame from a Dataset",
                "digest": "721acdfdf36de9b51a2100a2f4056904d2641c49e5812515fe565adecdf076d1"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.2.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.Common",
                "name": "Extracts columns by semantic type",
                "digest": "8ec39fb39a8a0caca637ef87c1a641b43b1fde77c81a1627456b75f388fa1741"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "semantic_types": {
                    "type": "VALUE",
                    "data": [
                        "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                    ]
                },
                "exclude_columns": {
                    "type": "VALUE",
                    "data": [
                        16,
                        17,
                        3
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                "version": "0.6.0",
                "python_path": "d3m.primitives.data_transformation.column_parser.Common",
                "name": "Parses strings into their types",
                "digest": "c8bfa9fa3834534aeecc2fef272167119f6d7dec1d26360465f5a61862136e87"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "exclude_columns": {
                    "type": "VALUE",
                    "data": [
                        16,
                        17,
                        3
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.Common",
                "name": "Extracts columns by semantic type",
                "digest": "8ec39fb39a8a0caca637ef87c1a641b43b1fde77c81a1627456b75f388fa1741"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.5.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "exclude_columns": {
                    "type": "VALUE",
                    "data": [
                        16,
                        17,
                        3
                    ]
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                "version": "2019.11.13",
                "python_path": "d3m.primitives.data_cleaning.imputer.SKlearn",
                "name": "sklearn.impute.SimpleImputer",
                "digest": "1fbe6321949de3f9bd1d93c6900cd5c3b3ee4b1a01506b89c69a776a9d27bf7a"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.6.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "use_semantic_types": {
                    "type": "VALUE",
                    "data": true
                },
                "return_result": {
                    "type": "VALUE",
                    "data": "replace"
                },
                "strategy": {
                    "type": "VALUE",
                    "data": "median"
                },
                "error_on_no_input": {
                    "type": "VALUE",
                    "data": false
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "854727ed-c82c-3137-ac59-fd52bc9ba385",
                "version": "2019.11.13",
                "python_path": "d3m.primitives.data_preprocessing.robust_scaler.SKlearn",
                "name": "sklearn.preprocessing.data.RobustScaler",
                "digest": "11ad3b6f497382297ae772a42a0345509133aa1b4f783b84299d990c5ca2ea08"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.7.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ],
            "hyperparams": {
                "return_result": {
                    "type": "VALUE",
                    "data": "replace"
                }
            }
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "2fb16403-8509-3f02-bdbf-9696e2fcad55",
                "version": "2019.11.13",
                "python_path": "d3m.primitives.regression.ridge.SKlearn",
                "name": "sklearn.linear_model.ridge.Ridge",
                "digest": "e35a19e9a292d24ed93d89e36953b830d68fb25791dad3606f670fa2affccaae"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.8.produce"
                },
                "outputs": {
                    "type": "CONTAINER",
                    "data": "steps.4.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        },
        {
            "type": "PRIMITIVE",
            "primitive": {
                "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                "version": "0.3.0",
                "python_path": "d3m.primitives.data_transformation.construct_predictions.Common",
                "name": "Construct pipeline predictions output",
                "digest": "72b09a3850221af181095b84d76904107a59fa40ed6631c5e42b45a6f2151772"
            },
            "arguments": {
                "inputs": {
                    "type": "CONTAINER",
                    "data": "steps.9.produce"
                },
                "reference": {
                    "type": "CONTAINER",
                    "data": "steps.3.produce"
                }
            },
            "outputs": [
                {
                    "id": "produce"
                }
            ]
        }
    ],
    "name": "Pipeline for evaluation",
    "digest": "9786c4f00a8860f8efc5fdfda8fb7bf52cd3932f2980c319a04d97d93fbead7f"
}